#include "dynamic.h"
#include "language.h"

#include "dmdefs.h"
#pragma code("pdlcsapi.dll")
#include "pdlcsapi.h"
#pragma code()

#pragma code( "kernel32.dll" )
HLOCAL LocalFree( HLOCAL hMem );
#pragma code()
#pragma option(mbcs)

#ifndef LB_ADDSTRING
#define LB_ADDSTRING    0x0180
#endif

#ifndef LB_SETCURSEL
#define LB_SETCURSEL    0x0186
#endif

#define XGAP     15
#define YGAP     5


DECLARE_WIZARD_FOR_OCX

BEGIN_PROPERTY_SCHEME
END_PROPERTY_SCHEME


BEGIN_DYNAMICS
	{
		PF_TABNAME,
		CI_NAME1,
		NULL,
		"BPC.bmp",
		CI_NAME2
		CI_NAME3,		
		{ "OnOption1", NULL, },
		"OnGenerate",
		"OnShowGenerateInfo",
		{ 
		NULL
		},
	},
END_DYNAMICS




DECLARE_JCR_ZYCL_TRIGGERS

char 	g_Vari[100];
DWORD	dwTypes[1];
DM_VARFILTER	dmFilter   = {DM_VARFILTER_TYPENAME, 0, NULL, NULL, NULL, NULL };
BOOL 		bResult = FALSE;
char 		szFaceplateType[255];
char 		szFaceplateTypeInstance[255];
int		anzahl;
char		szTypeName[255];

char *GetMemberOfVariable( char *var )
{
int i;
char *p;
for ( i=strlen(var)-1; i>0; i-- )
  {if ( var[i] == '.' ) return( var+i );}
return( var );
}

BOOL EnumFct(char *property, VARTYPE vt, LPVOID pItem)
{
LINK_INFO lpLink;
char nam_buffer[_MAX_PATH];
char preinstance[_MAX_PATH];

	_mbscpy((unsigned char *)lpLink.szLinkName,(unsigned char *)"");
      PDLCSGetLink(GetProjectName(),GetPictureName(),GetObjectName(),property,&lpLink,NULL);
	if (BUBRT_LT_VARIABLE_DIRECT == lpLink.enumLinkType)
	{
		if (!(_mbsrchr((unsigned char *)lpLink.szLinkName,'.')) == NULL )
		{
			_mbscpy((unsigned char *)preinstance,(unsigned char *)GetMemberOfVariable(lpLink.szLinkName));
			_mbscpy((unsigned char *)nam_buffer,(unsigned char *) preinstance);
			_mbscpy((unsigned char *)lpLink.szLinkName, (unsigned char *)g_Vari);
			_mbscat((unsigned char *)lpLink.szLinkName, (unsigned char *)nam_buffer);	
 			PDLCSSetLink(GetProjectName(),GetPictureName(),GetObjectName(),property,&lpLink,NULL);
		}
	}
	return TRUE;
}


void OnOption1(void)
{


HWND		hWnd;
RECT		rect;
char*		p;
char*		lpszTypeName	= NULL;
DWORD		i;
	
szFaceplateType[0] = szFaceplateTypeInstance[0] = '\0';
dwTypes[0] = 0;
anzahl = 0;
szTypeName[0] = '\0';

ConnectToWinCC();

  // Property "StructureType" auslesen
bResult = PDLCSGetPropertyEx( GetProjectName(),
                     		GetPictureName(), 
                     		GetObjectName(),
                     		"StructureType",
                     		VT_LPSTR,
                     		&lpszTypeName,
                     		0,
                     		NULL,
                     		NULL);

if ( bResult != FALSE && lpszTypeName != NULL )
{
    _mbsncpy((unsigned char *)szFaceplateType,(unsigned char *)lpszTypeName,100);
    szFaceplateType[100] = '\0';

    // Speicher freigeben, der von PDLRTGetPropEx angelegt wurde...
    LocalFree(  (HLOCAL)lpszTypeName );  lpszTypeName = NULL;

    _mbscpy((unsigned char *)szTypeName,(unsigned char *)szFaceplateType);
//    _mbscat(szTypeName,"*");   // St: 28.03.00
    dmFilter.lpszConn = &szTypeName[0];
    	}
  	else
    	{
    	// Property "Servername" auslesen, um Typname daraus zu gewinnen
    	bResult = PDLCSGetPropertyEx( GetProjectName(),
                       		  GetPictureName(), 
                     		  GetObjectName(),
                     		  "Servername",
                     		  VT_LPSTR,
                     		  &lpszTypeName,
                     		  0,
                     		  NULL,
                     		  NULL);

    	if ( bResult != FALSE && lpszTypeName != NULL )
      {
		if (5 < _mbslen((unsigned char *)lpszTypeName))
		{
   		   	// Typname aus Servername extrahieren ("PCS7 ...... Control")
  		    	_mbsncpy((unsigned char *)szFaceplateType,(unsigned char *) &lpszTypeName[5],100);
      		for ( i=(strlen(szFaceplateType)-1); i>4, szFaceplateType[i]!=' '; i-- )
	      	;
      		szFaceplateType[i] = '\0';

      		p = (char *)_mbsstr((unsigned char *)szFaceplateType, (unsigned char *)"SIPART");	// Ausnahme SIPART 19/21
    
	      	if (p != NULL)
      	  	{
				_mbscpy((unsigned char *)szFaceplateType, (unsigned char *)"SIPART");
	        	}

    		  	_mbscpy((unsigned char *)szTypeName,(unsigned char *)szFaceplateType);
//     		 	_mbscat(szTypeName,"*");   // St: 28.03.00
			dmFilter.lpszConn = &szTypeName[0];
		}
	    	else
	      {
			dwTypes[0] = DM_VARTYPE_STRUCT; /*14*/
			dmFilter.dwFlags = DM_VARFILTER_TYPE;
 			dmFilter.dwNumTypes = 1;
			dmFilter.pdwTypes = &dwTypes[0];
	      }
     		// Speicher freigeben, der von PDLRTGetPropEx angelegt wurde...
     		LocalFree(  (HLOCAL)lpszTypeName );  lpszTypeName = NULL;
      }
    	else
      {
		dwTypes[0] = DM_VARTYPE_STRUCT; /*14*/
		dmFilter.dwFlags = DM_VARFILTER_TYPE;
 		dmFilter.dwNumTypes = 1;
		dmFilter.pdwTypes = &dwTypes[0];
      }
}

sprintf(g_Vari,"");
CreateStatic(0, 30,TEXT_CI_00 );
hWnd=CreateVarBrowserEx(0,0, &dmFilter, g_Vari);
GetWindowRect(GetParent(hWnd), &rect);
MoveWindow(hWnd, 0, 50, (rect.right - rect.left), 20, TRUE);}

void OnShowGenerateInfo(HWND hEdit)
{
int i;

	char *test = TEXT_CI_09
	             TEXT_CI_10
		     TEXT_CI_11
				 "   %s\r\n"
		     TEXT_CI_13
				 "   %s\r\n"
		     "\r\n";

	char text[255];

	for ( i=0; i<=strlen(g_Vari); i++ )
	  if ( g_Vari[i] == '.' )
		{
		g_Vari[i] = '\0';
		break;
		}

{
	char *objName;
	objName = GetObjectName();
	if ((strlen(g_Vari)<32) && (strlen(objName)<32))
	{
	sprintf(text,test,objName,g_Vari);
	}	
	else
	{
	char objName2[36];
	char g_Vari2[36] ;

	if(strlen(objName) <32)
		{
		
		for ( i=0; i<=strlen(objName); i++ )
			objName2[i] = objName[i];
		}

	else
	{
		int n;
		objName2[0] = '.' ;
		objName2[1] = '.' ;
		objName2[2] = '.' ;
		n = strlen(objName);
		for ( i=0; i<32; i++ )
			{
			objName2[i+3] = objName[n-32+i];
			}	


	}
	if (strlen(g_Vari)<32)
		{
		for ( i=0; i<= strlen(g_Vari); i++ )
			g_Vari2[i] = g_Vari[i];
		}
	else
	{	

		int m;
		g_Vari2[0] = '.' ;
		g_Vari2[1] = '.' ;
		g_Vari2[2] = '.' ;

		m = strlen(g_Vari);
		for ( i=0; i<32; i++ )
			g_Vari2[i+3] = g_Vari[m-32+i];
	}
	sprintf(text,test,objName2,g_Vari2);
	}

}
	SetWindowText(hEdit, text);
}

void OnGenerate(void)
{
char szTag[260];
char szTagname[260];
char szOldTagname[260];
char* pszObject = NULL;
char szOldLinkName[260];
char szNewLinkName[260];
SEARCH_ITEM_STRUCT Searchitem[2];
CMN_ERROR pError;

	int i;

	for ( i=0; i<=strlen(g_Vari); i++ )
	{
	  	if ( g_Vari[i] == '.' )
		{
			g_Vari[i] = '\0';
			break;
		}
	}
      EnumProperty("EnumFct", NULL, 3);

// Get the tagname - Property only for compare
	PDLCSGetPropertyEx(GetProjectName(),GetPictureName(),GetObjectName(), "tagname", VT_LPSTR, &pszObject, 0, NULL, NULL);	
	if (pszObject)	
	{
		_mbsncpy((unsigned char *)szOldTagname, (unsigned char *)pszObject, 260);
    		LocalFree(  (HLOCAL)pszObject );  pszObject= NULL;
	}	
// Get the tag - Property only for compare
	PDLCSGetPropertyEx(GetProjectName(),GetPictureName(),GetObjectName(), "tag", VT_LPSTR, &pszObject, 0, NULL, NULL);	
	if (pszObject)	
	{
		_mbsncpy((unsigned char *)szTag, (unsigned char *)pszObject, 260);
    		LocalFree(  (HLOCAL)pszObject );  pszObject= NULL;
	}	

	_mbsncpy((unsigned char *)szTagname, (unsigned char *)g_Vari, 260);
	pszObject = szTagname;
	PDLCSSetPropertyEx(GetProjectName(),GetPictureName(),GetObjectName(), "tagname", VT_LPSTR, &pszObject, 0, NULL, NULL);
//Set Property tag only, if tag and tagname is equal
	if ( 0 == _mbscmp((unsigned char *)szOldTagname,(unsigned char *) szTag))
		PDLCSSetPropertyEx(GetProjectName(),GetPictureName(),GetObjectName(), "tag", VT_LPSTR, &pszObject, 0, NULL, NULL);

// Change String


  	Searchitem[0].lpszSearchStr = szOldTagname; 	// String to search in variable or picture names
  	Searchitem[0].lpszReplaceStr = szTagname;	// String to replace with
  	Searchitem[0].dwFlags = CS_COMPLETE_STRING;			// Flags (see m_PdlCS.PDLCS_CS_FLAGS)

  	_mbsncpy((unsigned char *)szOldLinkName,(unsigned char *)szOldTagname,sizeof(szOldLinkName));
  	_mbsncpy((unsigned char *)szNewLinkName,(unsigned char *)szTagname,sizeof(szNewLinkName));

  	_mbsncat((unsigned char *)szOldLinkName, (unsigned char *)".",sizeof(szOldLinkName));
  	_mbsncat((unsigned char *)szNewLinkName, (unsigned char *)".",sizeof(szNewLinkName));

  	Searchitem[1].lpszSearchStr = szOldLinkName; 	// String to search in variable or picture names
  	Searchitem[1].lpszReplaceStr = szNewLinkName;	// String to replace with
  	Searchitem[1].dwFlags = CS_PART_STRING;			// Flags (see m_PdlCS.PDLCS_CS_FLAGS)

 
  	Searchitem[0].Type = REPLACE_TAG;	
  	Searchitem[1].Type = REPLACE_TAG;	


  	PDLCSChangeStrings(GetProjectName(),GetPictureName(),GetObjectName(),2,&Searchitem[0],NULL,TRUE,&pError);
}
